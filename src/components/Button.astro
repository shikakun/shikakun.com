---
import Icon from '@components/Icon.astro';

const {
  element,
  className,
  href,
  target,
  type,
  rel,
  data,
  ariaLabel,
  popovertarget,
  appearance,
  width,
  leadingIcon,
  trailingIcon,
  iconOnly,
} = Astro.props;

let classes = 'button';

if (className) {
  classes += ` ${className}`;
}

if (iconOnly) {
  classes += ' -icon-only';
}

if (appearance == 'outlined') {
  classes += ' -appearance-outlined';
}

if (appearance == 'filled') {
  classes += ' -appearance-filled';
}

if (width == 'full') {
  classes += ' -width-full';
}
---

{
  element === 'a' && (
    <a
      class={classes}
      href={href}
      target={target}
      rel={rel}
      data={data}
      aria-label={ariaLabel}
    >
      {leadingIcon ? (
        <div class='leading'>
          <Icon name={leadingIcon} />
        </div>
      ) : null}
      {iconOnly ? null : (
        <div class='body'>
          <slot />
        </div>
      )}
      {trailingIcon ? (
        <div class='trailing'>
          <Icon name={trailingIcon} />
        </div>
      ) : null}
    </a>
  )
}

{
  element === 'button' && (
    <button
      type={type}
      class={classes}
      data={data}
      aria-label={ariaLabel}
      popovertarget={popovertarget}
    >
      {leadingIcon ? (
        <div class='leading'>
          <Icon name={leadingIcon} />
        </div>
      ) : null}
      {iconOnly ? null : (
        <div class='body'>
          <slot />
        </div>
      )}
      {trailingIcon ? (
        <div class='trailing'>
          <Icon name={trailingIcon} />
        </div>
      ) : null}
    </button>
  )
}

<style lang='scss'>
  @use '@styles/variables';
  @use '@styles/functions';
  @use '@styles/mixins';
  @use 'sass:math';
  @use 'sass:map';

  .button {
    @include mixins.initialize(a);
    @include mixins.initialize(button);
    box-sizing: border-box;
    position: relative;
    display: inline-flex;
    gap: functions.get-spacing-size(xxs);
    align-items: center;
    justify-content: center;
    height: functions.get-interactive-component-size(l);
    max-width: 100%;
    padding: 0 math.div(functions.get-interactive-component-size(l), 4);
    overflow: hidden;
    white-space: nowrap;
    text-align: center;
    text-overflow: ellipsis;
    vertical-align: text-bottom;
    cursor: pointer;
    @include mixins.interactive-overlay;
    @include mixins.focus-ring;

    &.-appearance-outlined {
      box-shadow: inset 0 0 0 2px currentColor;
    }

    &.-appearance-filled {
      background-color: functions.get-primitive-color(blue, 50);
    }

    &.-icon-only {
      width: functions.get-interactive-component-size(l);
    }

    &.-width-full {
      width: 100%;
      justify-content: flex-start;
    }

    .body {
      padding: 0 math.div(functions.get-interactive-component-size(l), 4);
      @include mixins.text(l, dense);
      @include mixins.text-truncate($max-lines: 1);
    }

    .leading,
    .trailing {
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: functions.get-leading-trailing-icon-size(l);
    }
  }
</style>
