---
import { Article, mapContentToArticle } from '@utils/articles';
import { fetchContentsApi } from '@utils/fetch-contents-api';
import { getFormattedDate } from '@utils/view-helpers';
import Layout from '@layouts/Layout.astro';
import Button from '@components/Button.astro';
import Markdown from '@components/Markdown.astro';
import Image from '@components/blocks/Image.astro';
import Text from '@components/blocks/Text.astro';
import Video from '@components/blocks/Video.astro';
import Appendix from '@components/blocks/Appendix.astro';
import TagList from '@components/TagList.astro';

export async function getStaticPaths() {
  const articles: Article[] = await fetchContentsApi('/articles', {
    populate: 'deep',
    'sort[date]': 'desc',
  }).then((contents) => contents.data.map(mapContentToArticle));

  return articles.map((article) => {
    return {
      params: {
        slug: article.slug,
      },
      props: {
        article,
      },
    };
  });
}

const { article } = Astro.props;
---

<Layout
  title={article.title}
  description={article.description}
  openGraph={{
    basic: {
      title: article.title,
      type: 'website',
      image: article.cover
        ? article.cover.attributes.url
        : 'https://shikakun.com/ogimage.png',
    },
  }}
>
  <main class='page'>
    <header class='header'>
      <div class='container'>
        <div class='header-column'>
          <h1 class='title'>
            {article.title}
          </h1>
          <time class='date' datetime={getFormattedDate(article.date, 'yyyy')}>
            {getFormattedDate(article.date, 'yyyy')}
          </time>
        </div>
      </div>
    </header>
    <div class='body'>
      <div class='container'>
        <div class='body-column'>
          {
            article.body.map((block) => {
              if (block.__component === 'blocks.text') {
                return <Text text={block.text} />;
              }
              if (block.__component === 'blocks.image') {
                return <Image image={block.image.data.attributes} />;
              }
              if (block.__component === 'blocks.video') {
                return <Video videoUrl={block.url} />;
              }
              if (block.__component === 'blocks.appendix') {
                return <Appendix text={block.text} />;
              }
              return null;
            })
          }
        </div>
      </div>
    </div>
    <footer class='footer'>
      <div class='container'>
        {
          article.category && (
            <div class='category'>
              <Button
                element='a'
                href={`/projects/categories/${article.category.slug}/`}
                appearance='outlined'
              >
                {article.category.name}
              </Button>
            </div>
          )
        }
        {
          article.tags && (
            <div class='tag'>
              <TagList tags={article.tags} />
            </div>
          )
        }
      </div>
    </footer>
  </main>
</Layout>

<style lang='scss'>
  @use '@styles/variables';
  @use '@styles/functions';
  @use '@styles/mixins';
  @use 'sass:math';
  @use 'sass:map';

  .page {
    @include mixins.page;
  }

  .container {
    @include mixins.container;
    @include mixins.grid;
  }

  .header {
    padding: functions.get-sizing-scale-size(192) 0;
  }

  .header-column {
    display: flex;
    flex-direction: column;
    gap: functions.get-spacing-size(l);
    @include mixins.grid-column(12);
  }

  .title {
    @include mixins.initialize(heading);
    letter-spacing: 0.025em;
    @include mixins.text(xl, dense);
    @include mixins.kerning;
    @include mixins.mq-boundary(up, m) {
      @include mixins.text(3xl, dense);
    }
  }

  .date {
    color: functions.get-text-color(light, secondary);
    @include mixins.text(xl, dense);
    @include mixins.kerning;
  }

  .body-column {
    @include mixins.grid-column(12);
    @include mixins.mq-boundary(up, l) {
      @include mixins.grid-column(10);
    }
    @include mixins.mq-boundary(up, xl) {
      @include mixins.grid-column(8);
    }
  }

  .footer {
    padding: functions.get-spacing-size(7xl) 0;
  }

  .category {
    @include mixins.grid-column(12);
    @include mixins.mq-boundary(up, m) {
      @include mixins.grid-column(4);
    }
    @include mixins.mq-boundary(up, l) {
      @include mixins.grid-column(3);
    }
  }

  .tag {
    @include mixins.grid-column(12);
    @include mixins.mq-boundary(up, m) {
      @include mixins.grid-column(8);
    }
    @include mixins.mq-boundary(up, l) {
      @include mixins.grid-column(9);
    }
  }
</style>
