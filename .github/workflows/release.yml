name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Check for version changes
        id: version_check
        run: |
          : # Get the current version of package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PACKAGE_VERSION"
          : # Get the latest git tag
          git fetch --prune --unshallow
          GIT_TAG=$(git describe --abbrev=0 --tags)
          echo "Git tag: $GIT_TAG"
          : # Compare current version of package.json and latest git tag
          if [ "$PACKAGE_VERSION" != "$GIT_TAG" ]; then
            echo "RELEASE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_VERSION=" >> $GITHUB_OUTPUT
          fi

      - name: Create and Push Tag
        if: steps.version_check.outputs.RELEASE_VERSION != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag ${{ steps.version_check.outputs.RELEASE_VERSION }}
          git push origin ${{ steps.version_check.outputs.RELEASE_VERSION }}

      - name: Build
        run: npm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
